[opts] = parse_args(varargin, ...
                              'verbose', false, ...
                              'veryverbose', false, ...
                              'numTrials', taskvars.optdefaults.numTrials, ...
                              'numBandits', taskvars.optdefaults.numBandits, ...
                              'numProbeTrials', taskvars.optdefaults.numProbeTrials, ...
                              'fracValidProbes', taskvars.optdefaults.fracValidProbes, ...
                              'roomLen', taskvars.optdefaults.roomLen, ...
                              'numRooms', taskvars.optdefaults.numRooms, ...
                              'payoffSwitch', taskvars.optdefaults.payoffSwitch, ...
                              'memAccuracy', taskvars.optdefaults.memAccuracy, ...
                              'memConfident', taskvars.optdefaults.memConfident, ...
                              'subjAlpha', taskvars.optdefaults.subjAlpha, ...
                              'subjAlphaMem', taskvars.optdefaults.subjAlphaMem, ...
                              'subjBeta', taskvars.optdefaults.subjBeta, ....
                              'subjPersev', taskvars.optdefaults.subjPersev, ...
                              'subjCtxAC', taskvars.optdefaults.subjCtxAC, ...
                              'subjSamples', taskvars.optdefaults.subjSamples, ...
                              'accumulateSamples', taskvars.optdefaults.accumulateSamples, ...
                              'mcSamples', [], ...
                              'whichModel', taskvars.optdefaults.whichModel, ...
                              'decayType', taskvars.optdefaults.decayType);      arguments for function
if (nargin < 1)
    subjData = [];
end

if (isempty(subjData))       # check to see if the
    opts.simulateSubj = true;
else
    opts.simulateSubj = false;
end

% We allow the user to override mcSamples when simulating. For instance, if we want to simulate subjects with more than one sample.
if (isempty(opts.mcSamples))
    if (opts.simulateSubj)
        % Simulating: Just one draw.
        opts.mcSamples = 1;
    else
        % Fitting: Approximate distribution using mcSamples # of samples
        opts.mcSamples = taskvars.optdefaults.mcSamples;
    end
end

%
opts.subjSamples = ceil(opts.subjSamples);

%%
% Initialize internal state.
taskvars.episodeList       = cell(opts.numTrials+1, 1);
taskvars.banditEpisodeList = cell(opts.numBandits, opts.numTrials+1);
taskvars.numBanditEpisodes = zeros(1, 3);

taskvars.trialIdx = 0;

choiceProbs = ones(opts.numTrials, 1)*(1/opts.numBandits);

if (~isempty(subjData))
    %% Fit subjData
    trialrec = subjData.trialrec;

    try
        memRec = subjData.memRec;
    catch
        memRec = [];
    end
    taskvars.choiceBlocks       = subjData.choiceBlocks;
    taskvars.invalidProbeTrials = sort(subjData.invalidProbeTrials);
    taskvars.memProbeTrials     = setdiff(sort(subjData.memProbeTrials), taskvars.invalidProbeTrials);
    taskvars.contexts           = [0:opts.numRooms];
else
    %% Red pill!

    %%% Set up task structures.
    % TODO: To generalize for other tasks, these could be subclassed out to return taskvars and taskfuncs.

    % Initialize recording structures.
    trialrec = cell(opts.numTrials, 1);
    memRec   = [];

    % Payout characteristics.
    taskvars.initPayouts  = [60 30 10];
    taskvars.initPayouts  = taskvars.initPayouts(randperm(length(taskvars.initPayouts)));
    taskvars.decayTheta   = taskvars.initPayouts;
    taskvars.decayLambda  = 0.6;
    taskvars.driftSigma   = 8;
    taskvars.driftNoise   = chol(eye(1)*(taskvars.driftSigma^2));
    taskvars.payoffBounds = [5 95];
    taskvars.ctxBump      = 3;

    % Generate sequence of choice and memory probe trials for final room.
    numProbes = opts.payoffSwitch * (opts.numRooms);
    meanCT    = 5;
    maxCT     = 8;
    minCT     = 2;

    choiceBlocks                     = -ceil(log(rand(1, numProbes))./(1/meanCT))+minCT;
    choiceBlocks(choiceBlocks>maxCT) = maxCT; % Trim blocks greater than maxCT

    % Trim the generated choice blocks until:
    %   1. They sum to the length of the final room (opts.numTrials/2)
    %   2. They fit within (minCT, maxCT)
    while (((sum(choiceBlocks)) ~= (opts.numTrials/2)) || ...
             any(choiceBlocks>maxCT) || ...
             any(choiceBlocks<minCT))
        ind               = ceil(rand*(numProbes));      % Pick a random block to trim
        choiceBlocks(ind) = choiceBlocks(ind) - sign(sum(choiceBlocks) - (opts.numTrials/2));

        choiceBlocks(choiceBlocks<minCT) = minCT;
        choiceBlocks(choiceBlocks>maxCT) = maxCT;
    end

    choiceBlocks = choiceBlocks - 1; % Leaves room for numProbes
    taskvars.choiceBlocks   = choiceBlocks;

    % Place a memory probe trial at the end of each choice block.
    taskvars.memProbeTrials = cumsum(taskvars.choiceBlocks+1)+[opts.roomLen*opts.numRooms];

    if (opts.verbose)
        disp(['choicemodel_ctxSample: Generated choice trials lengths,' ...
              ' sum '  num2str(sum(taskvars.choiceBlocks'))  ...
              ' mean ' num2str(mean(taskvars.choiceBlocks'))]);
        taskvars.choiceBlocks
        taskvars.memProbeTrials
    end

    trialNums = 1:opts.numTrials;
    taskvars.choiceTrials = setdiff(trialNums, taskvars.memProbeTrials);

    % Shuffle the list of memory probe trials.
    taskvars.memProbeTrials = taskvars.memProbeTrials(randperm(length(taskvars.memProbeTrials)));

    % Now take the first numInvalidProbes # of indexes. These will be the invalid/lure probes (novel images).
    taskvars.numInvalidProbes   = ceil((1-opts.fracValidProbes) * opts.numProbeTrials);
    taskvars.invalidProbeTrials = sort(taskvars.memProbeTrials(1:taskvars.numInvalidProbes));

    % Now the first opts.payoffSwitch trials of each context are available for later memory probes.
    taskvars.availableForMemProbe = [];
    for bIdx = 1:opts.numRooms-1;
        taskvars.availableForMemProbe = [taskvars.availableForMemProbe (opts.roomLen*bIdx):((opts.roomLen*bIdx)+opts.payoffSwitch-1)];
    end

    % Initialize contexts and probe images
    taskvars.contexts = zeros(1,opts.numTrials);
    % First context is short
    taskvars.contexts(1:(opts.roomLen-opts.payoffSwitch)) = 0;
    for ci = 1:opts.numRooms-1;
        sp = (opts.roomLen - opts.payoffSwitch) + ((ci-1)*opts.roomLen);
        ep = sp + opts.roomLen;
        taskvars.contexts((sp+1):ep) = ci;
    end

    taskvars.contexts(:, ((ep+1):end)) = max(taskvars.contexts)+1;

    taskvars.payout       = zeros(opts.numBandits, opts.numTrials);
    taskvars.payout(:, 1) = taskvars.initPayouts;
end % if (~isempty(subjData))

% If not simulating, and don't have a memRec, reconstruct memRec here.
% (First few subjects had an incomplete memRec; reconstructing here makes fitting easier.)
if (isempty(memRec) && ~opts.simulateSubj)
    %%
    % Generate memRec structure as in doPostTest
    memPairs          = {};
    for mpi = 1:length(taskvars.memProbeTrials)
        probed = trialrec{taskvars.memProbeTrials(mpi)}.probed;

        ft = [];
        for thisIdx = 1:(taskvars.memProbeTrials(mpi)-1);
            if (probed == trialrec{thisIdx}.probed)
                ft(1) = thisIdx;
                break;
            end
        end

        if (~isempty(ft))
            memPairs{end+1} = [taskvars.memProbeTrials(mpi) ft(1)];
        end
    end

    % Test each mem probe trial
    for testIdx = 1:length(memPairs)
        % Index of current trial, index of evoked bandit, response on room test, correct (1)/incorrect (-1) response on room test
        memRec(testIdx, :) = [memPairs{testIdx}(1) memPairs{testIdx}(2)];
    end
end % if(isempty(memRec))

%%
% First half of trials - `context rooms'.
for bIdx = 1:opts.numRooms;
    if (opts.verbose)
        disp(['choicemodel_ctxSample: Entering room ' num2str(bIdx)]);
    end

    for t = 1:opts.roomLen;
        taskvars.trialIdx   = taskvars.trialIdx + 1;
        [choiceProbs(taskvars.trialIdx) trialrec taskvars] = doChoiceTrial(trialrec, taskvars, opts);
    end
end

%%
% Second half of trials - probe session / `empty room'.
for cb = 1:size(taskvars.choiceBlocks, 2);
    % Run the prescribed # of choice trials
    for ct = 1:taskvars.choiceBlocks(cb);
        taskvars.trialIdx   = taskvars.trialIdx + 1;
        [choiceProbs(taskvars.trialIdx) trialrec taskvars] = doChoiceTrial(trialrec, taskvars, opts);
    end

    % Do a memory probe
    taskvars.trialIdx   = taskvars.trialIdx + 1;
    [trialrec taskvars] = doMemProbe(trialrec, memRec, taskvars, opts);
end % for choiceBlocks

end % function choicemodel_ctxSample